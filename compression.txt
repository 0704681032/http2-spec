



HTTPbis Working Group                                            R. Peon
Internet-Draft                                               Google, Inc
Intended status: Informational                                H. Ruellan
Expires: April 20, 2014                                        Canon CRF
                                                        October 17, 2013


                HPACK - Header Compression for HTTP/2.0
              draft-ietf-httpbis-header-compression-latest

Abstract

   This document describes HPACK, a format adapted to efficiently
   represent HTTP header fields in the context of HTTP/2.0.

Editorial Note (To be removed by RFC Editor)

   Discussion of this draft takes place on the HTTPBIS working group
   mailing list (ietf-http-wg@w3.org), which is archived at [1].

   Working Group information and related documents can be found at [2]
   (Wiki) and [3] (source code and issues tracker).

   The changes in this draft are summarized in Appendix A.1.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on April 20, 2014.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.





Peon & Ruellan           Expires April 20, 2014                 [Page 1]

Internet-Draft                   HPACK                      October 2013


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Overview  . . . . . . . . . . . . . . . . . . . . . . . . . .   3
     2.1.  Outline . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Header Field Encoding . . . . . . . . . . . . . . . . . . . .   4
     3.1.  Encoding Concepts . . . . . . . . . . . . . . . . . . . .   4
       3.1.1.  Encoding Context  . . . . . . . . . . . . . . . . . .   5
       3.1.2.  Header Table  . . . . . . . . . . . . . . . . . . . .   5
       3.1.3.  Reference Set . . . . . . . . . . . . . . . . . . . .   5
       3.1.4.  Header Field Representation . . . . . . . . . . . . .   6
       3.1.5.  Header Field Emission . . . . . . . . . . . . . . . .   7
     3.2.  Header Block Decoding . . . . . . . . . . . . . . . . . .   7
       3.2.1.  Header Field Representation Processing  . . . . . . .   7
       3.2.2.  Reference Set Emission  . . . . . . . . . . . . . . .   8
       3.2.3.  Header Set Completion . . . . . . . . . . . . . . . .   8
     3.3.  Header Table Management . . . . . . . . . . . . . . . . .   8
       3.3.1.  Maximum Table Size  . . . . . . . . . . . . . . . . .   8
       3.3.2.  Entry Eviction  . . . . . . . . . . . . . . . . . . .   9
       3.3.3.  Entry Addition  . . . . . . . . . . . . . . . . . . .   9
   4.  Detailed Format . . . . . . . . . . . . . . . . . . . . . . .   9
     4.1.  Low-level representations . . . . . . . . . . . . . . . .   9
       4.1.1.  Integer representation  . . . . . . . . . . . . . . .   9
       4.1.2.  String Literal Representation . . . . . . . . . . . .  11
     4.2.  Indexed Header Field Representation . . . . . . . . . . .  12
     4.3.  Literal Header Field Representation . . . . . . . . . . .  12
       4.3.1.  Literal Header Field without Indexing . . . . . . . .  12
       4.3.2.  Literal Header Field with Incremental Indexing  . . .  13
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .  14
   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  15
     6.1.  Normative References  . . . . . . . . . . . . . . . . . .  15
     6.2.  Informative References  . . . . . . . . . . . . . . . . .  15
   Appendix A.  Change Log (to be removed by RFC Editor before
                publication  . . . . . . . . . . . . . . . . . . . .  16
     A.1.  Since draft-ietf-httpbis-header-compression-03  . . . . .  16
     A.2.  Since draft-ietf-httpbis-header-compression-02  . . . . .  16
     A.3.  Since draft-ietf-httpbis-header-compression-01  . . . . .  16
     A.4.  Since draft-ietf-httpbis-header-compression-01  . . . . .  17



Peon & Ruellan           Expires April 20, 2014                 [Page 2]

Internet-Draft                   HPACK                      October 2013


   Appendix B.  Static Table . . . . . . . . . . . . . . . . . . . .  18
   Appendix C.  Huffman Codes For Requests . . . . . . . . . . . . .  19
   Appendix D.  Huffman Codes for Responses  . . . . . . . . . . . .  25
   Appendix E.  Request Huffman Encoding Example . . . . . . . . . .  31
   Appendix F.  Response Huffman Encoding Example  . . . . . . . . .  31
   Appendix G.  Example  . . . . . . . . . . . . . . . . . . . . . .  31
     G.1.  First header set  . . . . . . . . . . . . . . . . . . . .  31
     G.2.  Second header set . . . . . . . . . . . . . . . . . . . .  32
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  34

1.  Introduction

   This document describes HPACK, a format adapted to efficiently
   represent HTTP header fields in the context of HTTP/2.0 (see
   [HTTP2]).

2.  Overview

   In HTTP/1.X (see [HTTP-p1]), header fields are sent without any form
   of compression.  As web pages have grown to include dozens to
   hundreds of requests, the redundant header fields in these requests
   now pose a problem of measurable latency and unnecessary bandwidth
   (see [PERF1] and [PERF2]).

   SPDY [SPDY] initially addressed this redundancy by compressing header
   fields with Deflate, which proved very effective at eliminating the
   redundant header fields.  However, that aproach exposed a security
   risk as demonstrated by the CRIME [CRIME].

   In this document, we propose a new compressor for header fields which
   eliminates redundant header fields, is not vulnerable to CRIME style
   attacks, and which also has a bounded memory cost for use in
   constrained environments.

2.1.  Outline

   The HTTP header field encoding described in this document is based on
   a header table that map (name, value) pairs to index values.  Header
   tables are incrementally updated during the HTTP/2.0 session.

   The encoder is responsible for deciding which header fields to insert
   as new entries in the header table.  The decoder then does exactly
   what the encoder prescribes, ending in a state that exactly matches
   the encoder's state.  This enables decoders to remain simple and
   understand a wide variety of encoders.

   As two consecutive sets of header fields often have header fields in
   common, each set of header fields is coded as a difference from the



Peon & Ruellan           Expires April 20, 2014                 [Page 3]

Internet-Draft                   HPACK                      October 2013


   previous set of header fields.  The goal is to only encode the
   changes (header fields present in one of the set and not in the
   other) between the two sets of header fields.

   An example illustrating the use of these different mechanisms to
   represent header fields is available in Appendix G.

3.  Header Field Encoding

3.1.  Encoding Concepts

   The encoding and decoding of header fields relies on some components
   and concepts:

   Header Field:  A key, value pair.  HPACK allows a header field value
      to be either a value as specified by HTTP/1.X (see [HTTP-p1]), or
      a NULL-separated ordered list of HTTP/1.X values.

   Header Table:  The header table (see Section 3.1.2) is a component
      used to associate stored header fields to index values.  The data
      stored in this table is in first-in, first-out order.

   Static Table:  The static table (see Appendix B) is a component used
      to associate static header fields to index values.  This data is
      ordered, read-only, always accessible, and may be shared amongst
      all encoding contexts.

   Reference Set:  The reference set (see Section 3.1.3) is a component
      containing an unordered set of references to entries in the header
      table or static table.  This is used for the differential encoding
      of a new header set.

   Header Set:  A header set is a potentially ordered group of header
      fields that are encoded jointly.  A complete set of key-value
      pairs contained in a HTTP request or response is a header set.

   Header Field Representation:  A header field can be represented in
      encoded form either as a literal or as an index (see
      Section 3.1.4).

   Header Block:  The entire set of encoded header field representations
      which, when decoded, yield a complete header set.

   Header Field Emission:  When decoding a set of header field
      representations, some operations emit a header field (see
      Section 3.1.5).  Once emitted, a header field can't be removed
      from the current header set, and can be passed safely to upper
      processing layers.



Peon & Ruellan           Expires April 20, 2014                 [Page 4]

Internet-Draft                   HPACK                      October 2013


3.1.1.  Encoding Context

   The set of mutable structures used within an encoding context include
   a header table and a reference set.  Everything else is either
   immutable or conceptual.

   Using HTTP, messages are exchanged between a client and a server in
   both direction.  To keep the encoding of header fields in each
   direction independent from the other direction, there is one encoding
   context for each direction.

   The header fields contained in a PUSH_PROMISE frame sent by a server
   to a client are encoded within the same context as the header fields
   contained in the HEADERS frame corresponding to a response sent from
   the server to the client.

3.1.2.  Header Table

   A header table consists of a list of header fields maintained in
   first-in, first-out order.  The first and newest entry in a header
   table is always at index 0, and the oldest entry of a header table is
   at the index len(header table)-1.

   The header table is initially empty.

   There is typically no need for the header table to contain duplicate
   entries.  However, duplicate entries MUST NOT be treated as an error
   by a decoder.

   The encoder decides how to update the header table and as such can
   control how much memory is used by the header table.  To limit the
   memory requirements on the decoder side, the header table size is
   strictly bounded (see Section 3.3.1).

   The header table is updated during the processing of a set of header
   field representations (see header field representation processing
   (Section 3.2.1).

3.1.3.  Reference Set

   A reference set is an unordered set of references to entries either
   within the header table or the static table.

   The reference set is initially empty.

   The reference set is updated during the processing of a set of header
   field representations (see header field representation processing
   (Section 3.2.1).



Peon & Ruellan           Expires April 20, 2014                 [Page 5]

Internet-Draft                   HPACK                      October 2013


   The reference set enables differential encoding, whereby only
   differences between the previous header set and the current header
   set need to be encoded.

   When an entry is evicted from the header table, if it was referenced
   from the reference set, its reference is removed from the reference
   set.

3.1.4.  Header Field Representation

   An encoded header field can be represented either as a literal or as
   an index.

   Literal Representation:  A literal representation defines a new
      header field.  The header field name is represented either
      literally or as a reference to an entry of the header table.  The
      header field value is represented literally.

      Two different literal representations are provided:

      *  A literal representation that does not add the header field to
         the header table (see Section 4.3.1).

      *  A literal representation that adds the header field as a new
         entry at the beginning of the header table (see Section 4.3.2).

   Indexed Representation:  The indexed representation defines a header
      field as a reference to an entry in either the header table or the
      static table(see Section 4.2).


          <----------  Index Address Space ---------->
          <-- Header  Table -->  <-- Static  Table -->
          +---+-----------+---+  +---+-----------+---+
          | 0 |    ...    | k |  |k+1|    ...    | n |
          +---+-----------+---+  +---+-----------+---+
          ^                   |
          |                   V
   Insertion Point       Drop Point


                            Index Address Space

         Indices between 0 and len(header table)-1, inclusive, refer to
         elements in the header table, with index 0 referring to the
         beginning of the table.





Peon & Ruellan           Expires April 20, 2014                 [Page 6]

Internet-Draft                   HPACK                      October 2013


         Indices between len(header table) and len(header
         table)+len(static table)-1, inclusive, refer to elements in the
         static table, where the index len(header table) refers to the
         first entry in the static table.

         Any other indices MUST be treated as erroneous, and the
         compression context considered corrupt and unusable.

3.1.5.  Header Field Emission

   The emission of a header field is the process of passing that header
   field to the application, so that the application can process and
   react to header field data.

   By emitting header fields instead of emitting header sets, the
   decoder can be implemented in a streaming way, and as such must only
   keep in memory the header table and the reference set.  This bounds
   the amount of memory used by the decoder, even in presence of a very
   large set of header fields.  The management of memory for handling
   very large sets of header fields can therefore be deferred to the
   application.

   When a header field is a NULL-separated list of values, each value
   within the list MAY be emitted separately, with the same header field
   name, and the order of emission MUST be the order of appearance in
   the list.

3.2.  Header Block Decoding

   The processing of a header block to obtain a header set is defined in
   this section.  To ensure that the decoding will successfully produce
   a header set, a decoder MUST obey the following rules.

3.2.1.  Header Field Representation Processing

   All the header field representations contained in a header block are
   processed in the order in which they are presented, as specified
   below.

   An _indexed representation_ corresponding to an entry _not present_
   in the reference set entails the following actions:

   o  A reference to the entry is added to the reference set.

   o  The header field corresponding to the entry is emitted.

   An _indexed representation_ corresponding to an entry _present_ in
   the reference set entails the following actions:



Peon & Ruellan           Expires April 20, 2014                 [Page 7]

Internet-Draft                   HPACK                      October 2013


   o  The reference to the entry is removed from the reference set.

   A _literal representation_ that is _not added_ to the header table
   entails the following action:

   o  The header field is emitted.

   A _literal representation_ that is _added_ to the header table
   entails the following actions:

   o  The header field is inserted at the beginning of the header table.

   o  A reference to the new entry is added to the reference set.

   o  The header field is emitted.

3.2.2.  Reference Set Emission

   Once all the representations contained in a header block have been
   processed, the header fields referenced in the reference set which
   have not previously been emitted during this processing are emitted.

3.2.3.  Header Set Completion

   Once all of the header field representations have been processed, and
   the remaining items in the reference set have been emitted, the
   header set is complete.

3.3.  Header Table Management

3.3.1.  Maximum Table Size

   To limit the memory requirements on the decoder side, the size of the
   the header table is bounded.  The size of the header table MUST stay
   lower than or equal to the value of the HTTP/2.0 setting
   SETTINGS_HEADER_TABLE_SIZE (see [HTTP2]).

   The size of the the header table is the sum of the size of its
   entries.

   The size of an entry is the sum of its name's length in bytes (as
   defined in Section 4.1.2), of its value's length in bytes
   (Section 4.1.2) and of 32 bytes.  The 32 bytes are an accounting for
   the entry structure overhead.  For example, an entry structure using
   two 64-bits pointers to reference the name and the value and the
   entry, and two 64-bits integer for counting the number of references
   to these name and value would use 32 bytes.




Peon & Ruellan           Expires April 20, 2014                 [Page 8]

Internet-Draft                   HPACK                      October 2013


3.3.2.  Entry Eviction

   Whenever an entry is evicted from the header table, any reference to
   that entry contained by the reference set is removed.

   Whenever SETTINGS_HEADER_TABLE_SIZE is made smaller, entries are
   evicted from the end of the header table until the size of the header
   table is less than or equal to SETTINGS_HEADER_TABLE_SIZE.

   The eviction of an entry from the header table causes the index of
   the entries in the static table to be reduced by one.

3.3.3.  Entry Addition

   Whenever a new entry is to be added to the table, entries are first
   evicted from the end of the header table until the size of the header
   table is less than or equal to SETTINGS_HEADER_TABLE_SIZE - new entry
   size, or until the table is empty.

   If the size of the new entry is less than or equal to
   SETTINGS_HEADER_TABLE_SIZE, that entry is added to the table.  It is
   not an error to attempt to add an entry that is larger than
   SETTINGS_HEADER_TABLE_SIZE.

4.  Detailed Format

4.1.  Low-level representations

4.1.1.  Integer representation

   Integers are used to represent name indexes, pair indexes or string
   lengths.  To allow for optimized processing, an integer
   representation always finishes at the end of a byte.

   An integer is represented in two parts: a prefix that fills the
   current byte and an optional list of bytes that are used if the
   integer value does not fit in the prefix.  The number of bits of the
   prefix (called N) is a parameter of the integer representation.

   The N-bit prefix allows filling the current byte.  If the value is
   small enough (strictly less than 2^N-1), it is encoded within the
   N-bit prefix.  Otherwise all the bits of the prefix are set to 1 and
   the value is encoded using an unsigned variable length integer [4]
   representation.

   The algorithm to represent an integer I is as follows:





Peon & Ruellan           Expires April 20, 2014                 [Page 9]

Internet-Draft                   HPACK                      October 2013


   If I < 2^N - 1, encode I on N bits
   Else
       encode 2^N - 1 on N bits
       I = I - (2^N - 1)
       While I >= 128
            Encode (I % 128 + 128) on 8 bits
            I = I / 128
       encode (I) on 8 bits


4.1.1.1.  Example 1: Encoding 10 using a 5-bit prefix

   The value 10 is to be encoded with a 5-bit prefix.

   o  10 is less than 31 (= 2^5 - 1) and is represented using the 5-bit
      prefix.

     0   1   2   3   4   5   6   7
   +---+---+---+---+---+---+---+---+
   | X | X | X | 0 | 1 | 0 | 1 | 0 |   10 stored on 5 bits
   +---+---+---+---+---+---+---+---+


4.1.1.2.  Example 2: Encoding 1337 using a 5-bit prefix

   The value I=1337 is to be encoded with a 5-bit prefix.

      1337 is greater than 31 (= 2^5 - 1).



         The 5-bit prefix is filled with its max value (31).

      I = 1337 - (2^5 - 1) = 1306.



         I (1306) is greater than or equal to 128, the while loop body
         executes:



            I % 128 == 26

            26 + 128 == 154

            154 is encoded in 8 bits as: 10011010




Peon & Ruellan           Expires April 20, 2014                [Page 10]

Internet-Draft                   HPACK                      October 2013


            I is set to 10 (1306 / 128 == 10)

            I is no longer greater than or equal to 128, the while loop
            terminates.

         I, now 10, is encoded on 8 bits as: 00001010

      The process ends.

     0   1   2   3   4   5   6   7
   +---+---+---+---+---+---+---+---+
   | X | X | X | 1 | 1 | 1 | 1 | 1 |  Prefix = 31, I = 1306
   | 1 | 0 | 0 | 1 | 1 | 0 | 1 | 0 |  1306>=128, encode(154), I=1306/128
   | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 |  10<128, encode(10), done
   +---+---+---+---+---+---+---+---+


4.1.2.  String Literal Representation

   Header field names and header field values are encoded as sequences
   of bytes.  A header field name or a header field value is encoded in
   two parts:

   1.  The number of bytes required to hold the result of the next step,
       represented as a variable-length-quantity (Section 4.1.1).

   2.  The bitwise concatenation of the canonical [CANON]huffman code
       [HUFF] corresponding to each character of the data, the huffman
       code representing EOF, and padding with zeroes to the nearest
       byte boundary.

   String literals sent in the client to server direction are encoded
   with the codes within the request huffman code table (Appendix C)
   (see Request Huffman Encoding Example (Appendix F)).

   String literals sent in the server to client direction are encoded
   with the codes within the response huffman code table (Appendix D)
   (see Response Huffman Encoding Example (Appendix F)).

   The EOF symbol is represented with value 256, and is used solely to
   signal the end of the huffman-encoded key data or the end of the
   huffman-encoded value data.









Peon & Ruellan           Expires April 20, 2014                [Page 11]

Internet-Draft                   HPACK                      October 2013


4.2.  Indexed Header Field Representation

   An indexed header field representation either identifies an entry in
   the header table or static table.  The specified entry is emitted and
   a reference to that entry is added to the reference set if it is not
   currently in the reference set.  If it is present in the reference
   set then the reference is removed and the entry is not emitted.

     0   1   2   3   4   5   6   7
   +---+---+---+---+---+---+---+---+
   | 1 |        Index (7+)         |
   +---+---------------------------+

                           Indexed Header Field

   This representation starts with the '1' 1-bit pattern, followed by
   the index of the matching pair, represented as an integer with a
   7-bit prefix.

4.3.  Literal Header Field Representation

   Literal header field representations contain a literal header field
   value.  Header field names are either provided as a literal or by
   reference to an existing header table or static table entry.

   Literal representations all result in the emission of a header field
   when decoded.

4.3.1.  Literal Header Field without Indexing

   A literal header field without indexing causes the emission of a
   header field without altering the header table.

     0   1   2   3   4   5   6   7
   +---+---+---+---+---+---+---+---+
   | 0 | 1 |      Index (6+)       |
   +---+---+---+-------------------+
   |       Value Length (8+)       |
   +-------------------------------+
   | Value String (Length octets)  |
   +-------------------------------+

           Literal Header Field without Indexing - Indexed Name

     0   1   2   3   4   5   6   7
   +---+---+---+---+---+---+---+---+
   | 0 | 1 |           0           |
   +---+---+---+-------------------+



Peon & Ruellan           Expires April 20, 2014                [Page 12]

Internet-Draft                   HPACK                      October 2013


   |       Name Length (8+)        |
   +-------------------------------+
   |  Name String (Length octets)  |
   +-------------------------------+
   |       Value Length (8+)       |
   +-------------------------------+
   | Value String (Length octets)  |
   +-------------------------------+

             Literal Header Field without Indexing - New Name

   This representation starts with the '01' 2-bit pattern.

   If the header field name matches the header field name of a (name,
   value) pair stored in the Header Table or Static Table, the index of
   that entry, increased by one (index + 1), is represented as an
   integer with a 6-bit prefix.  Note that if the index is strictly
   below 63, only one byte is used for this representation.

   If the header field name does not match a header field name entry,
   the value 0 is represented on 6 bits followed by the header field
   name (Section 4.1.2).

   The header field name representation is followed by the header field
   value represented as a literal string as described in Section 4.1.2.

4.3.2.  Literal Header Field with Incremental Indexing

   A literal header field with incremental indexing adds a new entry to
   the header table.

     0   1   2   3   4   5   6   7
   +---+---+---+---+---+---+---+---+
   | 0 | 0 |      Index (6+)       |
   +---+---+---+-------------------+
   |       Value Length (8+)       |
   +-------------------------------+
   | Value String (Length octets)  |
   +-------------------------------+

       Literal Header Field with Incremental Indexing - Indexed Name

     0   1   2   3   4   5   6   7
   +---+---+---+---+---+---+---+---+
   | 0 | 0 |           0           |
   +---+---+---+-------------------+
   |       Name Length (8+)        |
   +-------------------------------+



Peon & Ruellan           Expires April 20, 2014                [Page 13]

Internet-Draft                   HPACK                      October 2013


   |  Name String (Length octets)  |
   +-------------------------------+
   |       Value Length (8+)       |
   +-------------------------------+
   | Value String (Length octets)  |
   +-------------------------------+

         Literal Header Field with Incremental Indexing - New Name

   This representation starts with the '00' 2-bit pattern.

   If the header field name matches the header field name of a (name,
   value) pair stored in the header table or static table, the index of
   the pair increased by one (index + 1) is represented as an integer
   with a 6-bit prefix.

   If the header field name does not match a header field name entry,
   the value 0 is represented on 6 bits followed by the header field
   name (Section 4.1.2).

   The header field name representation is followed by the header field
   value represented as a literal string as described in Section 4.1.2.

5.  Security Considerations

   This compressor exists to solve security issues present in stream
   compressors such as DEFLATE whereby the compression context can be
   efficiently probed to reveal secrets.  A conformant implementation of
   this specification should be fairly safe against that kind of attack,
   as the reaping of any information from the compression context
   requires more work than guessing and verifying the plaintext data
   directly with the server.  As with any secret, however, the longer
   the length of the secret, the more difficult the secret is to guess.
   It is inadvisable to have short cookies that are relied upon to
   remain secret for any duration of time.

   A proper security-conscious implementation will also need to prevent
   timing attacks by ensuring that the amount of time it takes to do
   string comparisons is always a function of the total length of the
   strings, and not a function of the number of matched characters.

   Another common security problem is when the remote endpoint
   successfully causes the local endpoint to exhaust its memory.  This
   compressor attempts to deal with the most obvious ways that this
   could occur by limiting both the peak and the steady-state amount of
   memory consumed in the compressor state, by providing ways for the
   application to consume/flush the emitted header fields in small
   chunks, and by considering overhead in the state size calculation.



Peon & Ruellan           Expires April 20, 2014                [Page 14]

Internet-Draft                   HPACK                      October 2013


   Implementors must still be careful in the creation of APIs to an
   implementation of this compressor by ensuring that header field keys
   and values are either emitted as a stream, or that the compression
   implementation have a limit on the maximum size of a key or value.
   Failure to implement these kinds of safeguards may still result in a
   scenario where the local endpoint exhausts its memory.

6.  References

6.1.  Normative References

   [HTTP-p1]  Fielding, R., Ed. and J. F. Reschke, Ed., "Hypertext
              Transfer Protocol (HTTP/1.1): Message Syntax and Routing",
              draft-ietf-httpbis-p1-messaging-24 (work in progress),
              September 2013.

   [HTTP-p2]  Fielding, R., Ed. and J. F. Reschke, Ed., "Hypertext
              Transfer Protocol (HTTP/1.1): Semantics and Content",
              draft-ietf-httpbis-p2-semantics-24 (work in progress),
              September 2013.

   [HTTP-p4]  Fielding, R., Ed. and J. F. Reschke, Ed., "Hypertext
              Transfer Protocol (HTTP/1.1): Conditional Requests",
              draft-ietf-httpbis-p4-conditional-24 (work in progress),
              September 2013.

   [HTTP-p5]  Fielding, R., Ed., Lafon, Y., Ed., and J. F. Reschke, Ed.,
              "Hypertext Transfer Protocol (HTTP/1.1): Range Requests",
              draft-ietf-httpbis-p5-range-24 (work in progress),
              September 2013.

   [HTTP-p6]  Fielding, R., Ed., Nottingham, M., Ed., and J. F. Reschke,
              Ed., "Hypertext Transfer Protocol (HTTP/1.1): Caching",
              draft-ietf-httpbis-p6-cache-24 (work in progress),
              September 2013.

   [HTTP-p7]  Fielding, R., Ed. and J. F. Reschke, Ed., "Hypertext
              Transfer Protocol (HTTP/1.1): Authentication", draft-ietf-
              httpbis-p7-auth-24 (work in progress), September 2013.

   [HTTP2]    Belshe, M., Peon, R., Thomson, M., and A. Melnikov,
              "Hypertext Transfer Protocol version 2.0", draft-ietf-
              httpbis-http2-06 (work in progress), August 2013.

6.2.  Informative References

   [CANON]    Schwartz, E. S. and B. Kallick, "Generating a canonical
              prefix encoding", Communications of the ACM Volume 7 Issue



Peon & Ruellan           Expires April 20, 2014                [Page 15]

Internet-Draft                   HPACK                      October 2013


              3, pp. 166-169, March 1964,
              <http://dl.acm.org/citation.cfm?id=363991>.

   [CRIME]    Rizzo, J. and T. Duong, "The Crime Attack", September
              2012, <https://docs.google.com/a/twist.com/presentation/d/
              11eBmGiHbYcHR9gL5nDyZChu_-lCa2GizeuOfaLU2HOU/
              edit#slide=id.g1eb6c1b5_3_6>.

   [HUFF]     Huffman, D. A., "A Method for the Construction of Minimim
              Redundancy Codes", Proceedings of the Institute of Radio
              Engineers Volume 40, Number 9, pp. 1098-1101, September
              1952, <http://ieeexplore.ieee.org/xpl/
              articleDetails.jsp?arnumber=4051119>.

   [PERF1]    Belshe, M., "IETF83: SPDY and What to Consider for HTTP/
              2.0", March 2012, <http://www.ietf.org/proceedings/83/
              slides/slides-83-httpbis-3>.

   [PERF2]    McManus, P., "SPDY: What I Like About You", September
              2011, <http://bitsup.blogspot.com/2011/09/spdy-what-i
              -like-about-you.html>.

   [SPDY]     Belshe, M. and R. Peon, "SPDY Protocol", draft-mbelshe-
              httpbis-spdy-00 (work in progress), February 2012.

Appendix A.  Change Log (to be removed by RFC Editor before publication

A.1.  Since draft-ietf-httpbis-header-compression-03

   o  A large number of editorial changes; changed the description of
      evicting/adding new entries.

   o  Removed substitution indexing

   o  Changed 'initial headers' to 'static headers', as per issue #258

   o  Merged 'request' and 'response' static headers, as per issue #259

   o  Changed text to indicate that new headers are added at index 0 and
      expire from the largest index, as per issue #233

A.2.  Since draft-ietf-httpbis-header-compression-02

   o  Corrected error in integer encoding pseudocode.

A.3.  Since draft-ietf-httpbis-header-compression-01





Peon & Ruellan           Expires April 20, 2014                [Page 16]

Internet-Draft                   HPACK                      October 2013


   o  Refactored of Header Encoding Section: split definitions and
      processing rule.

   o  Backward incompatible change: Updated reference set management as
      per issue #214.  This changes how the interaction between the
      reference set and eviction works.  This also changes the working
      of the reference set in some specific cases.

   o  Backward incompatible change: modified initial header list, as per
      issue #188.

   o  Added example of 32 bytes entry structure (issue #191).

   o  Added Header Set Completion section.  Reflowed some text.
      Clarified some writing which was akward.  Added text about
      duplicate header entry encoding.  Clarified some language w.r.t
      Header Set.  Changed x-my-header to mynewheader.  Added text in
      the HeaderEmission section indicating that the application may
      also be able to free up memory more quickly.  Added information in
      Security Considerations section.

A.4.  Since draft-ietf-httpbis-header-compression-01

      Fixed bug/omission in integer representation algorithm.

      Changed the document title.

      Header matching text rewritten.

      Changed the definition of header emission.

      Changed the name of the setting which dictates how much memory the
      compression context should use.

      Removed "specific use cases" section

      Corrected erroneous statement about what index can be contained in
      one byte

      Added descriptions of opcodes

      Removed security claims from introduction.









Peon & Ruellan           Expires April 20, 2014                [Page 17]

Internet-Draft                   HPACK                      October 2013


Appendix B.  Static Table

   The static table consists of an unchangable ordered list of (name,
   value) pairs.  The first entry in the table is always represented by
   the index len(header table), and the last entry in the table is
   represented by the index len(header table)+len(static table)-1.

   [[The ordering of these tables is currently arbitrary.  The tables in
   this section should be updated and ordered such that the table
   entries with the smallest indices are those which, based on a
   statistical analysis of the frequency of use weighted by size,
   achieve the largest decrease in bytes transmitted subject to HTTP 2.0
   header field rules (like removal of some header fields).  This set of
   header fields is currently very likely incomplete, and should be made
   complete.  ]]

   The following table lists the pre-defined header fields that make-up
   the static header table.

          +-------+-----------------------------+--------------+
          | Index | Header Name                 | Header Value |
          +-------+-----------------------------+--------------+
          | 0     | :host                       |              |
          | 1     | :method                     | GET          |
          | 2     | :method                     | POST         |
          | 3     | :path                       | /            |
          | 4     | :path                       | /index.html  |
          | 5     | :scheme                     | http         |
          | 6     | :scheme                     | https        |
          | 7     | :status                     | 200          |
          | 8     | :status                     | 500          |
          | 9     | :status                     | 404          |
          | 10    | :status                     | 403          |
          | 11    | :status                     | 400          |
          | 12    | :status                     | 401          |
          | 13    | accept-charset              |              |
          | 14    | accept-encoding             |              |
          | 15    | accept-language             |              |
          | 16    | accept-ranges               |              |
          | 17    | accept                      |              |
          | 18    | access-control-allow-origin |              |
          | 19    | age                         |              |
          | 20    | allow                       |              |
          | 21    | authorization               |              |
          | 22    | cache-control               |              |
          | 23    | content-disposition         |              |
          | 24    | content-encoding            |              |
          | 25    | content-language            |              |



Peon & Ruellan           Expires April 20, 2014                [Page 18]

Internet-Draft                   HPACK                      October 2013


          | 26    | content-length              |              |
          | 27    | content-location            |              |
          | 28    | content-range               |              |
          | 29    | content-type                |              |
          | 30    | cookie                      |              |
          | 31    | date                        |              |
          | 32    | etag                        |              |
          | 33    | expect                      |              |
          | 34    | expires                     |              |
          | 35    | from                        |              |
          | 36    | if-match                    |              |
          | 37    | if-modified-since           |              |
          | 38    | if-none-match               |              |
          | 39    | if-range                    |              |
          | 40    | if-unmodified-since         |              |
          | 41    | last-modified               |              |
          | 42    | link                        |              |
          | 43    | location                    |              |
          | 44    | max-forwards                |              |
          | 45    | proxy-authenticate          |              |
          | 46    | proxy-authorization         |              |
          | 47    | range                       |              |
          | 48    | referer                     |              |
          | 49    | refresh                     |              |
          | 50    | retry-after                 |              |
          | 51    | server                      |              |
          | 52    | set-cookie                  |              |
          | 53    | strict-transport-security   |              |
          | 54    | transfer-encoding           |              |
          | 55    | user-agent                  |              |
          | 56    | vary                        |              |
          | 57    | via                         |              |
          | 58    | www-authenticate            |              |
          +-------+-----------------------------+--------------+

                       Table 1: Static Table Entries

   The table give the index of each entry in the static table.  The full
   index of each entry, to be used for encoding a reference to this
   entry, is computed by adding the number of entries in the header
   table to this index.

Appendix C.  Huffman Codes For Requests

   The following Huffman codes are used when encoding string literals in
   the client to server direction.

                aligned                                  aligned



Peon & Ruellan           Expires April 20, 2014                [Page 19]

Internet-Draft                   HPACK                      October 2013


                 to                                       to
                 MSB                                      LSB
          sym    as bits                       len       as hex  len
         (  0) |11111111|11111111|11110111|100 [27]      7ffffbc [27]
         (  1) |11111111|11111111|11110111|101 [27]      7ffffbd [27]
         (  2) |11111111|11111111|11110111|110 [27]      7ffffbe [27]
         (  3) |11111111|11111111|11110111|111 [27]      7ffffbf [27]
         (  4) |11111111|11111111|11111000|000 [27]      7ffffc0 [27]
         (  5) |11111111|11111111|11111000|001 [27]      7ffffc1 [27]
         (  6) |11111111|11111111|11111000|010 [27]      7ffffc2 [27]
         (  7) |11111111|11111111|11111000|011 [27]      7ffffc3 [27]
         (  8) |11111111|11111111|11111000|100 [27]      7ffffc4 [27]
         (  9) |11111111|11111111|11111000|101 [27]      7ffffc5 [27]
         ( 10) |11111111|11111111|11111000|110 [27]      7ffffc6 [27]
         ( 11) |11111111|11111111|11111000|111 [27]      7ffffc7 [27]
         ( 12) |11111111|11111111|11111001|000 [27]      7ffffc8 [27]
         ( 13) |11111111|11111111|11111001|001 [27]      7ffffc9 [27]
         ( 14) |11111111|11111111|11111001|010 [27]      7ffffca [27]
         ( 15) |11111111|11111111|11111001|011 [27]      7ffffcb [27]
         ( 16) |11111111|11111111|11111001|100 [27]      7ffffcc [27]
         ( 17) |11111111|11111111|11111001|101 [27]      7ffffcd [27]
         ( 18) |11111111|11111111|11111001|110 [27]      7ffffce [27]
         ( 19) |11111111|11111111|11111001|111 [27]      7ffffcf [27]
         ( 20) |11111111|11111111|11111010|000 [27]      7ffffd0 [27]
         ( 21) |11111111|11111111|11111010|001 [27]      7ffffd1 [27]
         ( 22) |11111111|11111111|11111010|010 [27]      7ffffd2 [27]
         ( 23) |11111111|11111111|11111010|011 [27]      7ffffd3 [27]
         ( 24) |11111111|11111111|11111010|100 [27]      7ffffd4 [27]
         ( 25) |11111111|11111111|11111010|101 [27]      7ffffd5 [27]
         ( 26) |11111111|11111111|11111010|110 [27]      7ffffd6 [27]
         ( 27) |11111111|11111111|11111010|111 [27]      7ffffd7 [27]
         ( 28) |11111111|11111111|11111011|000 [27]      7ffffd8 [27]
         ( 29) |11111111|11111111|11111011|001 [27]      7ffffd9 [27]
         ( 30) |11111111|11111111|11111011|010 [27]      7ffffda [27]
         ( 31) |11111111|11111111|11111011|011 [27]      7ffffdb [27]
     ' ' ( 32) |11111111|0110 [12]                           ff6 [12]
     '!' ( 33) |11111111|0111 [12]                           ff7 [12]
     '"' ( 34) |11111111|111010 [14]                        3ffa [14]
     '#' ( 35) |11111111|1111100 [15]                       7ffc [15]
     '$' ( 36) |11111111|1111101 [15]                       7ffd [15]
     '%' ( 37) |100110 [6]                                    26 [6]
     '&' ( 38) |1110000 [7]                                   70 [7]
     ''' ( 39) |11111111|1111110 [15]                       7ffe [15]
     '(' ( 40) |11111111|1000 [12]                           ff8 [12]
     ')' ( 41) |11111111|1001 [12]                           ff9 [12]
     '*' ( 42) |11111111|1010 [12]                           ffa [12]
     '+' ( 43) |11111111|1011 [12]                           ffb [12]
     ',' ( 44) |11111110|00 [10]                             3f8 [10]



Peon & Ruellan           Expires April 20, 2014                [Page 20]

Internet-Draft                   HPACK                      October 2013


     '-' ( 45) |100111 [6]                                    27 [6]
     '.' ( 46) |00110 [5]                                      6 [5]
     '/' ( 47) |0000 [4]                                       0 [4]
     '0' ( 48) |00111 [5]                                      7 [5]
     '1' ( 49) |01000 [5]                                      8 [5]
     '2' ( 50) |01001 [5]                                      9 [5]
     '3' ( 51) |101000 [6]                                    28 [6]
     '4' ( 52) |1110001 [7]                                   71 [7]
     '5' ( 53) |101001 [6]                                    29 [6]
     '6' ( 54) |1110010 [7]                                   72 [7]
     '7' ( 55) |101010 [6]                                    2a [6]
     '8' ( 56) |1110011 [7]                                   73 [7]
     '9' ( 57) |101011 [6]                                    2b [6]
     ':' ( 58) |101100 [6]                                    2c [6]
     ';' ( 59) |11110100|0 [9]                               1e8 [9]
     '<' ( 60) |11111111|11111111|10 [18]                  3fffe [18]
     '=' ( 61) |101101 [6]                                    2d [6]
     '>' ( 62) |11111111|11111110|0 [17]                   1fffc [17]
     '?' ( 63) |11110100|1 [9]                               1e9 [9]
     '@' ( 64) |11111111|11100 [13]                         1ffc [13]
     'A' ( 65) |11101100 [8]                                  ec [8]
     'B' ( 66) |11101101 [8]                                  ed [8]
     'C' ( 67) |11101110 [8]                                  ee [8]
     'D' ( 68) |11101111 [8]                                  ef [8]
     'E' ( 69) |11110101|0 [9]                               1ea [9]
     'F' ( 70) |1110100 [7]                                   74 [7]
     'G' ( 71) |11110101|1 [9]                               1eb [9]
     'H' ( 72) |11110110|0 [9]                               1ec [9]
     'I' ( 73) |11110110|1 [9]                               1ed [9]
     'J' ( 74) |11111110|01 [10]                             3f9 [10]
     'K' ( 75) |11111111|010 [11]                            7fa [11]
     'L' ( 76) |11110111|0 [9]                               1ee [9]
     'M' ( 77) |11110111|1 [9]                               1ef [9]
     'N' ( 78) |11111000|0 [9]                               1f0 [9]
     'O' ( 79) |11111000|1 [9]                               1f1 [9]
     'P' ( 80) |11111001|0 [9]                               1f2 [9]
     'Q' ( 81) |11111110|10 [10]                             3fa [10]
     'R' ( 82) |11111001|1 [9]                               1f3 [9]
     'S' ( 83) |11111010|0 [9]                               1f4 [9]
     'T' ( 84) |11111010|1 [9]                               1f5 [9]
     'U' ( 85) |11111011|0 [9]                               1f6 [9]
     'V' ( 86) |11111011|1 [9]                               1f7 [9]
     'W' ( 87) |11111100|0 [9]                               1f8 [9]
     'X' ( 88) |11111100|1 [9]                               1f9 [9]
     'Y' ( 89) |11111110|11 [10]                             3fb [10]
     'Z' ( 90) |11111111|00 [10]                             3fc [10]
     '[' ( 91) |11111111|111011 [14]                        3ffb [14]
     '\' ( 92) |11111111|11111111|11111011|100 [27]      7ffffdc [27]



Peon & Ruellan           Expires April 20, 2014                [Page 21]

Internet-Draft                   HPACK                      October 2013


     ']' ( 93) |11111111|111100 [14]                        3ffc [14]
     '^' ( 94) |11111111|111101 [14]                        3ffd [14]
     '_' ( 95) |101110 [6]                                    2e [6]
     '`' ( 96) |11111111|11111111|110 [19]                 7fffe [19]
     'a' ( 97) |01010 [5]                                      a [5]
     'b' ( 98) |101111 [6]                                    2f [6]
     'c' ( 99) |01011 [5]                                      b [5]
     'd' (100) |110000 [6]                                    30 [6]
     'e' (101) |0001 [4]                                       1 [4]
     'f' (102) |110001 [6]                                    31 [6]
     'g' (103) |110010 [6]                                    32 [6]
     'h' (104) |110011 [6]                                    33 [6]
     'i' (105) |01100 [5]                                      c [5]
     'j' (106) |1110101 [7]                                   75 [7]
     'k' (107) |11110000 [8]                                  f0 [8]
     'l' (108) |110100 [6]                                    34 [6]
     'm' (109) |110101 [6]                                    35 [6]
     'n' (110) |01101 [5]                                      d [5]
     'o' (111) |01110 [5]                                      e [5]
     'p' (112) |01111 [5]                                      f [5]
     'q' (113) |11111101|0 [9]                               1fa [9]
     'r' (114) |10000 [5]                                     10 [5]
     's' (115) |10001 [5]                                     11 [5]
     't' (116) |0010 [4]                                       2 [4]
     'u' (117) |110110 [6]                                    36 [6]
     'v' (118) |11110001 [8]                                  f1 [8]
     'w' (119) |110111 [6]                                    37 [6]
     'x' (120) |11110010 [8]                                  f2 [8]
     'y' (121) |11110011 [8]                                  f3 [8]
     'z' (122) |11111101|1 [9]                               1fb [9]
     '{' (123) |11111111|11111110|1 [17]                   1fffd [17]
     '|' (124) |11111111|1100 [12]                           ffc [12]
     '}' (125) |11111111|11111111|0 [17]                   1fffe [17]
     '~' (126) |11111111|1101 [12]                           ffd [12]
         (127) |11111111|11111111|11111011|101 [27]      7ffffdd [27]
         (128) |11111111|11111111|11111011|110 [27]      7ffffde [27]
         (129) |11111111|11111111|11111011|111 [27]      7ffffdf [27]
         (130) |11111111|11111111|11111100|000 [27]      7ffffe0 [27]
         (131) |11111111|11111111|11111100|001 [27]      7ffffe1 [27]
         (132) |11111111|11111111|11111100|010 [27]      7ffffe2 [27]
         (133) |11111111|11111111|11111100|011 [27]      7ffffe3 [27]
         (134) |11111111|11111111|11111100|100 [27]      7ffffe4 [27]
         (135) |11111111|11111111|11111100|101 [27]      7ffffe5 [27]
         (136) |11111111|11111111|11111100|110 [27]      7ffffe6 [27]
         (137) |11111111|11111111|11111100|111 [27]      7ffffe7 [27]
         (138) |11111111|11111111|11111101|000 [27]      7ffffe8 [27]
         (139) |11111111|11111111|11111101|001 [27]      7ffffe9 [27]
         (140) |11111111|11111111|11111101|010 [27]      7ffffea [27]



Peon & Ruellan           Expires April 20, 2014                [Page 22]

Internet-Draft                   HPACK                      October 2013


         (141) |11111111|11111111|11111101|011 [27]      7ffffeb [27]
         (142) |11111111|11111111|11111101|100 [27]      7ffffec [27]
         (143) |11111111|11111111|11111101|101 [27]      7ffffed [27]
         (144) |11111111|11111111|11111101|110 [27]      7ffffee [27]
         (145) |11111111|11111111|11111101|111 [27]      7ffffef [27]
         (146) |11111111|11111111|11111110|000 [27]      7fffff0 [27]
         (147) |11111111|11111111|11111110|001 [27]      7fffff1 [27]
         (148) |11111111|11111111|11111110|010 [27]      7fffff2 [27]
         (149) |11111111|11111111|11111110|011 [27]      7fffff3 [27]
         (150) |11111111|11111111|11111110|100 [27]      7fffff4 [27]
         (151) |11111111|11111111|11111110|101 [27]      7fffff5 [27]
         (152) |11111111|11111111|11111110|110 [27]      7fffff6 [27]
         (153) |11111111|11111111|11111110|111 [27]      7fffff7 [27]
         (154) |11111111|11111111|11111111|000 [27]      7fffff8 [27]
         (155) |11111111|11111111|11111111|001 [27]      7fffff9 [27]
         (156) |11111111|11111111|11111111|010 [27]      7fffffa [27]
         (157) |11111111|11111111|11111111|011 [27]      7fffffb [27]
         (158) |11111111|11111111|11111111|100 [27]      7fffffc [27]
         (159) |11111111|11111111|11111111|101 [27]      7fffffd [27]
         (160) |11111111|11111111|11111111|110 [27]      7fffffe [27]
         (161) |11111111|11111111|11111111|111 [27]      7ffffff [27]
         (162) |11111111|11111111|11100000|00 [26]       3ffff80 [26]
         (163) |11111111|11111111|11100000|01 [26]       3ffff81 [26]
         (164) |11111111|11111111|11100000|10 [26]       3ffff82 [26]
         (165) |11111111|11111111|11100000|11 [26]       3ffff83 [26]
         (166) |11111111|11111111|11100001|00 [26]       3ffff84 [26]
         (167) |11111111|11111111|11100001|01 [26]       3ffff85 [26]
         (168) |11111111|11111111|11100001|10 [26]       3ffff86 [26]
         (169) |11111111|11111111|11100001|11 [26]       3ffff87 [26]
         (170) |11111111|11111111|11100010|00 [26]       3ffff88 [26]
         (171) |11111111|11111111|11100010|01 [26]       3ffff89 [26]
         (172) |11111111|11111111|11100010|10 [26]       3ffff8a [26]
         (173) |11111111|11111111|11100010|11 [26]       3ffff8b [26]
         (174) |11111111|11111111|11100011|00 [26]       3ffff8c [26]
         (175) |11111111|11111111|11100011|01 [26]       3ffff8d [26]
         (176) |11111111|11111111|11100011|10 [26]       3ffff8e [26]
         (177) |11111111|11111111|11100011|11 [26]       3ffff8f [26]
         (178) |11111111|11111111|11100100|00 [26]       3ffff90 [26]
         (179) |11111111|11111111|11100100|01 [26]       3ffff91 [26]
         (180) |11111111|11111111|11100100|10 [26]       3ffff92 [26]
         (181) |11111111|11111111|11100100|11 [26]       3ffff93 [26]
         (182) |11111111|11111111|11100101|00 [26]       3ffff94 [26]
         (183) |11111111|11111111|11100101|01 [26]       3ffff95 [26]
         (184) |11111111|11111111|11100101|10 [26]       3ffff96 [26]
         (185) |11111111|11111111|11100101|11 [26]       3ffff97 [26]
         (186) |11111111|11111111|11100110|00 [26]       3ffff98 [26]
         (187) |11111111|11111111|11100110|01 [26]       3ffff99 [26]
         (188) |11111111|11111111|11100110|10 [26]       3ffff9a [26]



Peon & Ruellan           Expires April 20, 2014                [Page 23]

Internet-Draft                   HPACK                      October 2013


         (189) |11111111|11111111|11100110|11 [26]       3ffff9b [26]
         (190) |11111111|11111111|11100111|00 [26]       3ffff9c [26]
         (191) |11111111|11111111|11100111|01 [26]       3ffff9d [26]
         (192) |11111111|11111111|11100111|10 [26]       3ffff9e [26]
         (193) |11111111|11111111|11100111|11 [26]       3ffff9f [26]
         (194) |11111111|11111111|11101000|00 [26]       3ffffa0 [26]
         (195) |11111111|11111111|11101000|01 [26]       3ffffa1 [26]
         (196) |11111111|11111111|11101000|10 [26]       3ffffa2 [26]
         (197) |11111111|11111111|11101000|11 [26]       3ffffa3 [26]
         (198) |11111111|11111111|11101001|00 [26]       3ffffa4 [26]
         (199) |11111111|11111111|11101001|01 [26]       3ffffa5 [26]
         (200) |11111111|11111111|11101001|10 [26]       3ffffa6 [26]
         (201) |11111111|11111111|11101001|11 [26]       3ffffa7 [26]
         (202) |11111111|11111111|11101010|00 [26]       3ffffa8 [26]
         (203) |11111111|11111111|11101010|01 [26]       3ffffa9 [26]
         (204) |11111111|11111111|11101010|10 [26]       3ffffaa [26]
         (205) |11111111|11111111|11101010|11 [26]       3ffffab [26]
         (206) |11111111|11111111|11101011|00 [26]       3ffffac [26]
         (207) |11111111|11111111|11101011|01 [26]       3ffffad [26]
         (208) |11111111|11111111|11101011|10 [26]       3ffffae [26]
         (209) |11111111|11111111|11101011|11 [26]       3ffffaf [26]
         (210) |11111111|11111111|11101100|00 [26]       3ffffb0 [26]
         (211) |11111111|11111111|11101100|01 [26]       3ffffb1 [26]
         (212) |11111111|11111111|11101100|10 [26]       3ffffb2 [26]
         (213) |11111111|11111111|11101100|11 [26]       3ffffb3 [26]
         (214) |11111111|11111111|11101101|00 [26]       3ffffb4 [26]
         (215) |11111111|11111111|11101101|01 [26]       3ffffb5 [26]
         (216) |11111111|11111111|11101101|10 [26]       3ffffb6 [26]
         (217) |11111111|11111111|11101101|11 [26]       3ffffb7 [26]
         (218) |11111111|11111111|11101110|00 [26]       3ffffb8 [26]
         (219) |11111111|11111111|11101110|01 [26]       3ffffb9 [26]
         (220) |11111111|11111111|11101110|10 [26]       3ffffba [26]
         (221) |11111111|11111111|11101110|11 [26]       3ffffbb [26]
         (222) |11111111|11111111|11101111|00 [26]       3ffffbc [26]
         (223) |11111111|11111111|11101111|01 [26]       3ffffbd [26]
         (224) |11111111|11111111|11101111|10 [26]       3ffffbe [26]
         (225) |11111111|11111111|11101111|11 [26]       3ffffbf [26]
         (226) |11111111|11111111|11110000|00 [26]       3ffffc0 [26]
         (227) |11111111|11111111|11110000|01 [26]       3ffffc1 [26]
         (228) |11111111|11111111|11110000|10 [26]       3ffffc2 [26]
         (229) |11111111|11111111|11110000|11 [26]       3ffffc3 [26]
         (230) |11111111|11111111|11110001|00 [26]       3ffffc4 [26]
         (231) |11111111|11111111|11110001|01 [26]       3ffffc5 [26]
         (232) |11111111|11111111|11110001|10 [26]       3ffffc6 [26]
         (233) |11111111|11111111|11110001|11 [26]       3ffffc7 [26]
         (234) |11111111|11111111|11110010|00 [26]       3ffffc8 [26]
         (235) |11111111|11111111|11110010|01 [26]       3ffffc9 [26]
         (236) |11111111|11111111|11110010|10 [26]       3ffffca [26]



Peon & Ruellan           Expires April 20, 2014                [Page 24]

Internet-Draft                   HPACK                      October 2013


         (237) |11111111|11111111|11110010|11 [26]       3ffffcb [26]
         (238) |11111111|11111111|11110011|00 [26]       3ffffcc [26]
         (239) |11111111|11111111|11110011|01 [26]       3ffffcd [26]
         (240) |11111111|11111111|11110011|10 [26]       3ffffce [26]
         (241) |11111111|11111111|11110011|11 [26]       3ffffcf [26]
         (242) |11111111|11111111|11110100|00 [26]       3ffffd0 [26]
         (243) |11111111|11111111|11110100|01 [26]       3ffffd1 [26]
         (244) |11111111|11111111|11110100|10 [26]       3ffffd2 [26]
         (245) |11111111|11111111|11110100|11 [26]       3ffffd3 [26]
         (246) |11111111|11111111|11110101|00 [26]       3ffffd4 [26]
         (247) |11111111|11111111|11110101|01 [26]       3ffffd5 [26]
         (248) |11111111|11111111|11110101|10 [26]       3ffffd6 [26]
         (249) |11111111|11111111|11110101|11 [26]       3ffffd7 [26]
         (250) |11111111|11111111|11110110|00 [26]       3ffffd8 [26]
         (251) |11111111|11111111|11110110|01 [26]       3ffffd9 [26]
         (252) |11111111|11111111|11110110|10 [26]       3ffffda [26]
         (253) |11111111|11111111|11110110|11 [26]       3ffffdb [26]
         (254) |11111111|11111111|11110111|00 [26]       3ffffdc [26]
         (255) |11111111|11111111|11110111|01 [26]       3ffffdd [26]
         (256) |10010 [5]                                     12 [5]



Appendix D.  Huffman Codes for Responses

   The following Huffman codes are used when encoding string literals in
   the server to client direction..

                aligned                                  aligned
                 to                                       to
                 MSB                                      LSB
          sym    as bits                      len        as hex  len
         (  0) |11111111|11111111|11101111|10 [26]       3ffffbe [26]
         (  1) |11111111|11111111|11101111|11 [26]       3ffffbf [26]
         (  2) |11111111|11111111|11110000|00 [26]       3ffffc0 [26]
         (  3) |11111111|11111111|11110000|01 [26]       3ffffc1 [26]
         (  4) |11111111|11111111|11110000|10 [26]       3ffffc2 [26]
         (  5) |11111111|11111111|11110000|11 [26]       3ffffc3 [26]
         (  6) |11111111|11111111|11110001|00 [26]       3ffffc4 [26]
         (  7) |11111111|11111111|11110001|01 [26]       3ffffc5 [26]
         (  8) |11111111|11111111|11110001|10 [26]       3ffffc6 [26]
         (  9) |11111111|11111111|11110001|11 [26]       3ffffc7 [26]
         ( 10) |11111111|11111111|11110010|00 [26]       3ffffc8 [26]
         ( 11) |11111111|11111111|11110010|01 [26]       3ffffc9 [26]
         ( 12) |11111111|11111111|11110010|10 [26]       3ffffca [26]
         ( 13) |11111111|11111111|11110010|11 [26]       3ffffcb [26]
         ( 14) |11111111|11111111|11110011|00 [26]       3ffffcc [26]
         ( 15) |11111111|11111111|11110011|01 [26]       3ffffcd [26]



Peon & Ruellan           Expires April 20, 2014                [Page 25]

Internet-Draft                   HPACK                      October 2013


         ( 16) |11111111|11111111|11110011|10 [26]       3ffffce [26]
         ( 17) |11111111|11111111|11110011|11 [26]       3ffffcf [26]
         ( 18) |11111111|11111111|11110100|00 [26]       3ffffd0 [26]
         ( 19) |11111111|11111111|11110100|01 [26]       3ffffd1 [26]
         ( 20) |11111111|11111111|11110100|10 [26]       3ffffd2 [26]
         ( 21) |11111111|11111111|11110100|11 [26]       3ffffd3 [26]
         ( 22) |11111111|11111111|11110101|00 [26]       3ffffd4 [26]
         ( 23) |11111111|11111111|11110101|01 [26]       3ffffd5 [26]
         ( 24) |11111111|11111111|11110101|10 [26]       3ffffd6 [26]
         ( 25) |11111111|11111111|11110101|11 [26]       3ffffd7 [26]
         ( 26) |11111111|11111111|11110110|00 [26]       3ffffd8 [26]
         ( 27) |11111111|11111111|11110110|01 [26]       3ffffd9 [26]
         ( 28) |11111111|11111111|11110110|10 [26]       3ffffda [26]
         ( 29) |11111111|11111111|11110110|11 [26]       3ffffdb [26]
         ( 30) |11111111|11111111|11110111|00 [26]       3ffffdc [26]
         ( 31) |11111111|11111111|11110111|01 [26]       3ffffdd [26]
     ' ' ( 32) |0000 [4]                                       0 [4]
     '!' ( 33) |11111111|1010 [12]                           ffa [12]
     '"' ( 34) |1101000 [7]                                   68 [7]
     '#' ( 35) |11111111|111010 [14]                        3ffa [14]
     '$' ( 36) |11111111|1111100 [15]                       7ffc [15]
     '%' ( 37) |11110101|0 [9]                               1ea [9]
     '&' ( 38) |11111110|00 [10]                             3f8 [10]
     ''' ( 39) |11111111|11100 [13]                         1ffc [13]
     '(' ( 40) |11110101|1 [9]                               1eb [9]
     ')' ( 41) |11110110|0 [9]                               1ec [9]
     '*' ( 42) |11111111|1011 [12]                           ffb [12]
     '+' ( 43) |11111110|01 [10]                             3f9 [10]
     ',' ( 44) |100110 [6]                                    26 [6]
     '-' ( 45) |100111 [6]                                    27 [6]
     '.' ( 46) |1101001 [7]                                   69 [7]
     '/' ( 47) |11101000 [8]                                  e8 [8]
     '0' ( 48) |0001 [4]                                       1 [4]
     '1' ( 49) |0010 [4]                                       2 [4]
     '2' ( 50) |0011 [4]                                       3 [4]
     '3' ( 51) |01000 [5]                                      8 [5]
     '4' ( 52) |01001 [5]                                      9 [5]
     '5' ( 53) |01010 [5]                                      a [5]
     '6' ( 54) |101000 [6]                                    28 [6]
     '7' ( 55) |01011 [5]                                      b [5]
     '8' ( 56) |01100 [5]                                      c [5]
     '9' ( 57) |01101 [5]                                      d [5]
     ':' ( 58) |01110 [5]                                      e [5]
     ';' ( 59) |11110110|1 [9]                               1ed [9]
     '<' ( 60) |11111111|11111100 [16]                      fffc [16]
     '=' ( 61) |1101010 [7]                                   6a [7]
     '>' ( 62) |11111111|111011 [14]                        3ffb [14]
     '?' ( 63) |11111111|1100 [12]                           ffc [12]



Peon & Ruellan           Expires April 20, 2014                [Page 26]

Internet-Draft                   HPACK                      October 2013


     '@' ( 64) |11111111|11111110|0 [17]                   1fffc [17]
     'A' ( 65) |1101011 [7]                                   6b [7]
     'B' ( 66) |11110111|0 [9]                               1ee [9]
     'C' ( 67) |11101001 [8]                                  e9 [8]
     'D' ( 68) |11101010 [8]                                  ea [8]
     'E' ( 69) |11101011 [8]                                  eb [8]
     'F' ( 70) |11101100 [8]                                  ec [8]
     'G' ( 71) |101001 [6]                                    29 [6]
     'H' ( 72) |11110111|1 [9]                               1ef [9]
     'I' ( 73) |11111000|0 [9]                               1f0 [9]
     'J' ( 74) |11101101 [8]                                  ed [8]
     'K' ( 75) |11111110|10 [10]                             3fa [10]
     'L' ( 76) |11111000|1 [9]                               1f1 [9]
     'M' ( 77) |101010 [6]                                    2a [6]
     'N' ( 78) |11101110 [8]                                  ee [8]
     'O' ( 79) |11101111 [8]                                  ef [8]
     'P' ( 80) |11111001|0 [9]                               1f2 [9]
     'Q' ( 81) |11111001|1 [9]                               1f3 [9]
     'R' ( 82) |11111010|0 [9]                               1f4 [9]
     'S' ( 83) |1101100 [7]                                   6c [7]
     'T' ( 84) |01111 [5]                                      f [5]
     'U' ( 85) |11111010|1 [9]                               1f5 [9]
     'V' ( 86) |11111011|0 [9]                               1f6 [9]
     'W' ( 87) |11110000 [8]                                  f0 [8]
     'X' ( 88) |11111110|11 [10]                             3fb [10]
     'Y' ( 89) |11111111|00 [10]                             3fc [10]
     'Z' ( 90) |11111111|01 [10]                             3fd [10]
     '[' ( 91) |11111111|1101 [12]                           ffd [12]
     '\' ( 92) |11111111|111100 [14]                        3ffc [14]
     ']' ( 93) |11111111|100 [11]                            7fc [11]
     '^' ( 94) |11111111|1111101 [15]                       7ffd [15]
     '_' ( 95) |11111011|1 [9]                               1f7 [9]
     '`' ( 96) |11111111|11111111|10 [18]                  3fffe [18]
     'a' ( 97) |10000 [5]                                     10 [5]
     'b' ( 98) |1101101 [7]                                   6d [7]
     'c' ( 99) |101011 [6]                                    2b [6]
     'd' (100) |101100 [6]                                    2c [6]
     'e' (101) |10001 [5]                                     11 [5]
     'f' (102) |1101110 [7]                                   6e [7]
     'g' (103) |1101111 [7]                                   6f [7]
     'h' (104) |1110000 [7]                                   70 [7]
     'i' (105) |101101 [6]                                    2d [6]
     'j' (106) |11111100|0 [9]                               1f8 [9]
     'k' (107) |11111100|1 [9]                               1f9 [9]
     'l' (108) |1110001 [7]                                   71 [7]
     'm' (109) |1110010 [7]                                   72 [7]
     'n' (110) |101110 [6]                                    2e [6]
     'o' (111) |101111 [6]                                    2f [6]



Peon & Ruellan           Expires April 20, 2014                [Page 27]

Internet-Draft                   HPACK                      October 2013


     'p' (112) |110000 [6]                                    30 [6]
     'q' (113) |11111101|0 [9]                               1fa [9]
     'r' (114) |110001 [6]                                    31 [6]
     's' (115) |1110011 [7]                                   73 [7]
     't' (116) |110010 [6]                                    32 [6]
     'u' (117) |110011 [6]                                    33 [6]
     'v' (118) |11110001 [8]                                  f1 [8]
     'w' (119) |11110010 [8]                                  f2 [8]
     'x' (120) |11110011 [8]                                  f3 [8]
     'y' (121) |11110100 [8]                                  f4 [8]
     'z' (122) |11111101|1 [9]                               1fb [9]
     '{' (123) |11111111|11111110|1 [17]                   1fffd [17]
     '|' (124) |11111111|111101 [14]                        3ffd [14]
     '}' (125) |11111111|11111111|0 [17]                   1fffe [17]
     '~' (126) |11111111|11111101 [16]                      fffd [16]
         (127) |11111111|11111111|11110111|10 [26]       3ffffde [26]
         (128) |11111111|11111111|11110111|11 [26]       3ffffdf [26]
         (129) |11111111|11111111|11111000|00 [26]       3ffffe0 [26]
         (130) |11111111|11111111|11111000|01 [26]       3ffffe1 [26]
         (131) |11111111|11111111|11111000|10 [26]       3ffffe2 [26]
         (132) |11111111|11111111|11111000|11 [26]       3ffffe3 [26]
         (133) |11111111|11111111|11111001|00 [26]       3ffffe4 [26]
         (134) |11111111|11111111|11111001|01 [26]       3ffffe5 [26]
         (135) |11111111|11111111|11111001|10 [26]       3ffffe6 [26]
         (136) |11111111|11111111|11111001|11 [26]       3ffffe7 [26]
         (137) |11111111|11111111|11111010|00 [26]       3ffffe8 [26]
         (138) |11111111|11111111|11111010|01 [26]       3ffffe9 [26]
         (139) |11111111|11111111|11111010|10 [26]       3ffffea [26]
         (140) |11111111|11111111|11111010|11 [26]       3ffffeb [26]
         (141) |11111111|11111111|11111011|00 [26]       3ffffec [26]
         (142) |11111111|11111111|11111011|01 [26]       3ffffed [26]
         (143) |11111111|11111111|11111011|10 [26]       3ffffee [26]
         (144) |11111111|11111111|11111011|11 [26]       3ffffef [26]
         (145) |11111111|11111111|11111100|00 [26]       3fffff0 [26]
         (146) |11111111|11111111|11111100|01 [26]       3fffff1 [26]
         (147) |11111111|11111111|11111100|10 [26]       3fffff2 [26]
         (148) |11111111|11111111|11111100|11 [26]       3fffff3 [26]
         (149) |11111111|11111111|11111101|00 [26]       3fffff4 [26]
         (150) |11111111|11111111|11111101|01 [26]       3fffff5 [26]
         (151) |11111111|11111111|11111101|10 [26]       3fffff6 [26]
         (152) |11111111|11111111|11111101|11 [26]       3fffff7 [26]
         (153) |11111111|11111111|11111110|00 [26]       3fffff8 [26]
         (154) |11111111|11111111|11111110|01 [26]       3fffff9 [26]
         (155) |11111111|11111111|11111110|10 [26]       3fffffa [26]
         (156) |11111111|11111111|11111110|11 [26]       3fffffb [26]
         (157) |11111111|11111111|11111111|00 [26]       3fffffc [26]
         (158) |11111111|11111111|11111111|01 [26]       3fffffd [26]
         (159) |11111111|11111111|11111111|10 [26]       3fffffe [26]



Peon & Ruellan           Expires April 20, 2014                [Page 28]

Internet-Draft                   HPACK                      October 2013


         (160) |11111111|11111111|11111111|11 [26]       3ffffff [26]
         (161) |11111111|11111111|11000000|0 [25]        1ffff80 [25]
         (162) |11111111|11111111|11000000|1 [25]        1ffff81 [25]
         (163) |11111111|11111111|11000001|0 [25]        1ffff82 [25]
         (164) |11111111|11111111|11000001|1 [25]        1ffff83 [25]
         (165) |11111111|11111111|11000010|0 [25]        1ffff84 [25]
         (166) |11111111|11111111|11000010|1 [25]        1ffff85 [25]
         (167) |11111111|11111111|11000011|0 [25]        1ffff86 [25]
         (168) |11111111|11111111|11000011|1 [25]        1ffff87 [25]
         (169) |11111111|11111111|11000100|0 [25]        1ffff88 [25]
         (170) |11111111|11111111|11000100|1 [25]        1ffff89 [25]
         (171) |11111111|11111111|11000101|0 [25]        1ffff8a [25]
         (172) |11111111|11111111|11000101|1 [25]        1ffff8b [25]
         (173) |11111111|11111111|11000110|0 [25]        1ffff8c [25]
         (174) |11111111|11111111|11000110|1 [25]        1ffff8d [25]
         (175) |11111111|11111111|11000111|0 [25]        1ffff8e [25]
         (176) |11111111|11111111|11000111|1 [25]        1ffff8f [25]
         (177) |11111111|11111111|11001000|0 [25]        1ffff90 [25]
         (178) |11111111|11111111|11001000|1 [25]        1ffff91 [25]
         (179) |11111111|11111111|11001001|0 [25]        1ffff92 [25]
         (180) |11111111|11111111|11001001|1 [25]        1ffff93 [25]
         (181) |11111111|11111111|11001010|0 [25]        1ffff94 [25]
         (182) |11111111|11111111|11001010|1 [25]        1ffff95 [25]
         (183) |11111111|11111111|11001011|0 [25]        1ffff96 [25]
         (184) |11111111|11111111|11001011|1 [25]        1ffff97 [25]
         (185) |11111111|11111111|11001100|0 [25]        1ffff98 [25]
         (186) |11111111|11111111|11001100|1 [25]        1ffff99 [25]
         (187) |11111111|11111111|11001101|0 [25]        1ffff9a [25]
         (188) |11111111|11111111|11001101|1 [25]        1ffff9b [25]
         (189) |11111111|11111111|11001110|0 [25]        1ffff9c [25]
         (190) |11111111|11111111|11001110|1 [25]        1ffff9d [25]
         (191) |11111111|11111111|11001111|0 [25]        1ffff9e [25]
         (192) |11111111|11111111|11001111|1 [25]        1ffff9f [25]
         (193) |11111111|11111111|11010000|0 [25]        1ffffa0 [25]
         (194) |11111111|11111111|11010000|1 [25]        1ffffa1 [25]
         (195) |11111111|11111111|11010001|0 [25]        1ffffa2 [25]
         (196) |11111111|11111111|11010001|1 [25]        1ffffa3 [25]
         (197) |11111111|11111111|11010010|0 [25]        1ffffa4 [25]
         (198) |11111111|11111111|11010010|1 [25]        1ffffa5 [25]
         (199) |11111111|11111111|11010011|0 [25]        1ffffa6 [25]
         (200) |11111111|11111111|11010011|1 [25]        1ffffa7 [25]
         (201) |11111111|11111111|11010100|0 [25]        1ffffa8 [25]
         (202) |11111111|11111111|11010100|1 [25]        1ffffa9 [25]
         (203) |11111111|11111111|11010101|0 [25]        1ffffaa [25]
         (204) |11111111|11111111|11010101|1 [25]        1ffffab [25]
         (205) |11111111|11111111|11010110|0 [25]        1ffffac [25]
         (206) |11111111|11111111|11010110|1 [25]        1ffffad [25]
         (207) |11111111|11111111|11010111|0 [25]        1ffffae [25]



Peon & Ruellan           Expires April 20, 2014                [Page 29]

Internet-Draft                   HPACK                      October 2013


         (208) |11111111|11111111|11010111|1 [25]        1ffffaf [25]
         (209) |11111111|11111111|11011000|0 [25]        1ffffb0 [25]
         (210) |11111111|11111111|11011000|1 [25]        1ffffb1 [25]
         (211) |11111111|11111111|11011001|0 [25]        1ffffb2 [25]
         (212) |11111111|11111111|11011001|1 [25]        1ffffb3 [25]
         (213) |11111111|11111111|11011010|0 [25]        1ffffb4 [25]
         (214) |11111111|11111111|11011010|1 [25]        1ffffb5 [25]
         (215) |11111111|11111111|11011011|0 [25]        1ffffb6 [25]
         (216) |11111111|11111111|11011011|1 [25]        1ffffb7 [25]
         (217) |11111111|11111111|11011100|0 [25]        1ffffb8 [25]
         (218) |11111111|11111111|11011100|1 [25]        1ffffb9 [25]
         (219) |11111111|11111111|11011101|0 [25]        1ffffba [25]
         (220) |11111111|11111111|11011101|1 [25]        1ffffbb [25]
         (221) |11111111|11111111|11011110|0 [25]        1ffffbc [25]
         (222) |11111111|11111111|11011110|1 [25]        1ffffbd [25]
         (223) |11111111|11111111|11011111|0 [25]        1ffffbe [25]
         (224) |11111111|11111111|11011111|1 [25]        1ffffbf [25]
         (225) |11111111|11111111|11100000|0 [25]        1ffffc0 [25]
         (226) |11111111|11111111|11100000|1 [25]        1ffffc1 [25]
         (227) |11111111|11111111|11100001|0 [25]        1ffffc2 [25]
         (228) |11111111|11111111|11100001|1 [25]        1ffffc3 [25]
         (229) |11111111|11111111|11100010|0 [25]        1ffffc4 [25]
         (230) |11111111|11111111|11100010|1 [25]        1ffffc5 [25]
         (231) |11111111|11111111|11100011|0 [25]        1ffffc6 [25]
         (232) |11111111|11111111|11100011|1 [25]        1ffffc7 [25]
         (233) |11111111|11111111|11100100|0 [25]        1ffffc8 [25]
         (234) |11111111|11111111|11100100|1 [25]        1ffffc9 [25]
         (235) |11111111|11111111|11100101|0 [25]        1ffffca [25]
         (236) |11111111|11111111|11100101|1 [25]        1ffffcb [25]
         (237) |11111111|11111111|11100110|0 [25]        1ffffcc [25]
         (238) |11111111|11111111|11100110|1 [25]        1ffffcd [25]
         (239) |11111111|11111111|11100111|0 [25]        1ffffce [25]
         (240) |11111111|11111111|11100111|1 [25]        1ffffcf [25]
         (241) |11111111|11111111|11101000|0 [25]        1ffffd0 [25]
         (242) |11111111|11111111|11101000|1 [25]        1ffffd1 [25]
         (243) |11111111|11111111|11101001|0 [25]        1ffffd2 [25]
         (244) |11111111|11111111|11101001|1 [25]        1ffffd3 [25]
         (245) |11111111|11111111|11101010|0 [25]        1ffffd4 [25]
         (246) |11111111|11111111|11101010|1 [25]        1ffffd5 [25]
         (247) |11111111|11111111|11101011|0 [25]        1ffffd6 [25]
         (248) |11111111|11111111|11101011|1 [25]        1ffffd7 [25]
         (249) |11111111|11111111|11101100|0 [25]        1ffffd8 [25]
         (250) |11111111|11111111|11101100|1 [25]        1ffffd9 [25]
         (251) |11111111|11111111|11101101|0 [25]        1ffffda [25]
         (252) |11111111|11111111|11101101|1 [25]        1ffffdb [25]
         (253) |11111111|11111111|11101110|0 [25]        1ffffdc [25]
         (254) |11111111|11111111|11101110|1 [25]        1ffffdd [25]
         (255) |11111111|11111111|11101111|0 [25]        1ffffde [25]



Peon & Ruellan           Expires April 20, 2014                [Page 30]

Internet-Draft                   HPACK                      October 2013


         (256) |10010 [5]                                     12 [5]




Appendix E.  Request Huffman Encoding Example

   TBD: Fill this in.

Appendix F.  Response Huffman Encoding Example

   TBD: Fill this in.

Appendix G.  Example

   Here is an example that illustrates different representations and how
   tables are updated.  [[This section needs to be updated to better
   reflect the new processing of header fields, and include more
   examples.]]

G.1.  First header set

   The first header set to represent is the following:

   :path, /my-example/index.html
   user-agent, my-user-agent
   mynewheader, first


   The header table is empty, all header fields are represented as
   literal header fields with indexing.  The 'mynewheader' header field
   name is not in the header table and is encoded literally.  This gives
   the following representation:

   0x04      (literal header with incremental indexing, name index = 3)
   0x16      (header field value string length = 22)
   /my-example/index.html
   0x0D      (literal header with incremental indexing, name index = 12)
   0x0D      (header field value string length = 13)
   my-user-agent
   0x00      (literal header with incremental indexing, new name)
   0x0B      (header field name string length = 11)
   mynewheader
   0x05      (header field value string length = 5)
   first






Peon & Ruellan           Expires April 20, 2014                [Page 31]

Internet-Draft                   HPACK                      October 2013


   The header table is as follows after the processing of these header
   fields:

   Header table
   +---------+----------------+---------------------------+
   |  Index  | Header Name    | Header Value              |
   +---------+----------------+---------------------------+
   |    0    | mynewheader    | first                     | added header
   +---------+----------------+---------------------------+
   |    1    | user-agent     | my-user-agent             | added header
   +---------+----------------+---------------------------+
   |    2    | :path          | /my-example/index.html    | added header
   +---------+----------------+---------------------------+
   |    3    | :scheme        | http                      |
   +---------+----------------+---------------------------+
   |    4    | :scheme        | https                     |
   +---------+----------------+---------------------------+
   |   ...   | ...            | ...                       |
   +---------+----------------+---------------------------+
   |   32    | via            |                           |
   +---------+----------------+---------------------------+


   As all the header fields in the first header set are indexed in the
   header table, all are kept in the reference set of header fields,
   which is:

   Reference Set:
   :path, /my-example/index.html
   user-agent, my-user-agent
   mynewheader, first


G.2.  Second header set

   The second header set to represent is the following:

   :path, /my-example/resources/script.js
   user-agent, my-user-agent
   mynewheader, second











Peon & Ruellan           Expires April 20, 2014                [Page 32]

Internet-Draft                   HPACK                      October 2013


   Comparing this second header set to the reference set, the first and
   third header fields are from the reference set are not present in
   this second header set and must be removed.  In addition, in this new
   set, the first and third header fields have to be encoded.  The path
   header field is represented as a literal header field without
   indexing.  The mynewheader will be represented as a literal header
   field with incremental indexing.

   0x80       (indexed header, index = 0: removal from reference set)
   0x82       (indexed header, index = 2: removal from reference set)
   0x43       (literal header, without indexing, name index = 2)
   0x1f       (header field value string length = 31)
   /my-example/resources/script.js
   0x01       (literal header, incremental indexing, name index = 0)
   0x06       (header field value string length = 6)
   second


   The header table is updated as follow:

   Header table
   +---------+----------------+---------------------------+
   |  Index  | Header Name    | Header Value              |
   +---------+----------------+---------------------------+
   |    0    | mynewheader    | second                    | added header
   +---------+----------------+---------------------------+
   |    1    | mynewheader    | first                     |
   +---------+----------------+---------------------------+
   |    2    | user-agent     | my-user-agent             |
   +---------+----------------+---------------------------+
   |    3    | :path          | /my-example/index.html    |
   +---------+----------------+---------------------------+
   |    4    | :scheme        | http                      |
   +---------+----------------+---------------------------+
   |    5    | :scheme        | https                     |
   +---------+----------------+---------------------------+
   |   ...   | ...            | ...                       |
   +---------+----------------+---------------------------+
   |   33    | via            |                           |
   +---------+----------------+---------------------------+


   All the header fields in this second header set are indexed in the
   header table, therefore, all are kept in the reference set of header
   fields, which becomes:

   Reference Set:
   :path, /my-example/resources/script.js



Peon & Ruellan           Expires April 20, 2014                [Page 33]

Internet-Draft                   HPACK                      October 2013


   user-agent, my-user-agent
   mynewheader, second


Authors' Addresses

   Roberto Peon
   Google, Inc

   EMail: fenix@google.com


   Herve Ruellan
   Canon CRF

   EMail: herve.ruellan@crf.canon.fr


































Peon & Ruellan           Expires April 20, 2014                [Page 34]
